# -*- coding: utf-8 -*-
"""exp1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JpOwloxlZOOCg3ezjy3IgEBfSh73cJRz
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load the dataset
file_path = "Sentiment_100_Dataset.csv"  # Update this to your local path if necessary
data = pd.read_csv("/content/drive/MyDrive/MLops/Sentiment_100_Dataset.csv")
data

import pickle

with open('exp1.pkl', 'wb') as file:
    pickle.dump(rf_model, file)

from google.colab import files
files.download('exp1.pkl')

with open('vectorizer.pkl', 'wb') as vectorizer_file:
    pickle.dump(vectorizer, vectorizer_file)
from google.colab import files
files.download('vectorizer.pkl')

from sklearn.preprocessing import LabelEncoder

vectorizer = CountVectorizer()
X = vectorizer.fit_transform(data["Text"])  # Transform the "Text" column into feature vectors
y = data["Sentiment"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Random Forest model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = rf_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Test with a new sample
sample_text = ["This product is amazing!", "I'm not happy with the quality."]
sample_features = vectorizer.transform(sample_text)
predictions = rf_model.predict(sample_features)
print("\nPredictions for new samples:", predictions)